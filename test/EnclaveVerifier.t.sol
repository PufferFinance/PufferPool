// SPDX-License-Identifier: Apache-2.0
pragma solidity >=0.8.0 <0.9.0;

import { Test } from "forge-std/Test.sol";
import { EnclaveVerifier, IEnclaveVerifier } from "puffer/EnclaveVerifier.sol";
import { RaveEvidence } from "puffer/interface/RaveEvidence.sol";
import { ValidBLSEvidence, MockEvidence } from "rave-test/mocks/MockEvidence.sol";

contract Guardian1RaveEvidence is MockEvidence {
    function report() public pure override returns (bytes memory) {
        // Report is inputted as abi-encoded JSON values
        return abi.encode(
            "233687983212438438770622770452245401679",
            "2023-09-01T07:56:57.694469",
            "4",
            "EbrM6X6YCH3brjPXT23gVh/I2EG5sVfHYh+S54fb0rrAqVRTiRTOSfLsWSVTZc8wrazGG7oooGoMU7Gj5TEhsrBrnh3hi7JBOga+j9dMkQCRClbEbCpuX8/+B244fKMo9sMqW1PAPAgorY4sg6/wTgZGaYrX6B7ITfYqY8jfs/Q=",
            "https://security-center.intel.com",
            "[\"INTEL-SA-00334\",\"INTEL-SA-00615\"]",
            "SW_HARDENING_NEEDED",
            // Already Base64 decoded off-chain
            "2010acc00d0d0000042616c98d53c9712639447c9b0e703f00000000000000001515b7ff80e00000000000000000000000000000000000000000500000001f0000000be74b5c3c4d41f79a43bc72f937ead8f9b682b6d85f9d7cfb02dd51bfbc260000000000000000000000000000000083d719e77deaca1470f6baf62a4d77433c899db692f9c70ee1dfc8c7ce9e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7e3eed2923c6408ecfc36c6a3f05b48a2474b389d493728293ec563300000000000000000000000000000000"
        );
    }

    // The leaf x509 signing certificate's signature over the report
    function sig() public pure override returns (bytes memory) {
        // base64 decoded signature as hex
        return
        hex"06fc47f6522dad62f096558999050f6529811f6781d8f73d3ae970de9b83b5e78f7dcde7741e40a6ee695782269c6ec26e13b599c9d7993d0e1eecd73c328a644c61887839cbc6a8c931a73355b15a39bd62186ea705ec32a3fd27dfdc2c728ab58c63cb873d4afcb3ca51d0825fe17d382bc3d65933acf3e3fc33212a6a135d36eb169367cc46c916e6417af44f892ccf3e67e2b3abc6c515f85175df4d776c1bc651a77ac8c88f71683010f54f10ed5550c35eda4a5e8dc76c11912a7be45809baa7d20fe3e5f3688f355ec6585ae132ba9e735ca40f7df856b7d7184957f26918322a32f51c5a259d3a4a484243deaf133e36ff9bb9be97517e";
    }

    // The leaf x509 signing certificate used to sign the report
    function signingCert() public pure override returns (bytes memory) {
        return
        hex"308204a130820309a003020102020900d107765d32a3b096300d06092a864886f70d01010b0500307e310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e3130302e06035504030c27496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e67204341301e170d3136313132323039333635385a170d3236313132303039333635385a307b310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e312d302b06035504030c24496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e6730820122300d06092a864886f70d01010105000382010f003082010a0282010100a97a2de0e66ea6147c9ee745ac0162686c7192099afc4b3f040fad6de093511d74e802f510d716038157dcaf84f4104bd3fed7e6b8f99c8817fd1ff5b9b864296c3d81fa8f1b729e02d21d72ffee4ced725efe74bea68fbc4d4244286fcdd4bf64406a439a15bcb4cf67754489c423972b4a80df5c2e7c5bc2dbaf2d42bb7b244f7c95bf92c75d3b33fc5410678a89589d1083da3acc459f2704cd99598c275e7c1878e00757e5bdb4e840226c11c0a17ff79c80b15c1ddb5af21cc2417061fbd2a2da819ed3b72b7efaa3bfebe2805c9b8ac19aa346512d484cfc81941e15f55881cc127e8f7aa12300cd5afb5742fa1d20cb467a5beb1c666cf76a368978b50203010001a381a43081a1301f0603551d2304183016801478437b76a67ebcd0af7e4237eb357c3b8701513c300e0603551d0f0101ff0404030206c0300c0603551d130101ff0402300030600603551d1f045930573055a053a051864f687474703a2f2f7472757374656473657276696365732e696e74656c2e636f6d2f636f6e74656e742f43524c2f5347582f4174746573746174696f6e5265706f72745369676e696e6743412e63726c300d06092a864886f70d01010b050003820181006708b61b5c2bd215473e2b46af99284fbb939d3f3b152c996f1a6af3b329bd220b1d3b610f6bce2e6753bded304db21912f385256216cfcba456bd96940be892f5690c260d1ef84f1606040222e5fe08e5326808212a447cfdd64a46e94bf29f6b4b9a721d25b3c4e2f62f58baed5d77c505248f0f801f9fbfb7fd752080095cee80938b339f6dbb4e165600e20e4a718812d49d9901e310a9b51d66c79909c6996599fae6d76a79ef145d9943bf1d3e35d3b42d1fb9a45cbe8ee334c166eee7d32fcdc9935db8ec8bb1d8eb3779dd8ab92b6e387f0147450f1e381d08581fb83df33b15e000a59be57ea94a3a52dc64bdaec959b3464c91e725bbdaea3d99e857e380a23c9d9fb1ef58e9e42d71f12130f9261d7234d6c37e2b03dba40dfdfb13ac4ad8e13fd3756356b6b50015a3ec9580b815d87c2cef715cd28df00bbf2a3c403ebf6691b3f05edd9143803ca085cff57e053eec2f8fea46ea778a68c9be885bc28225bc5f309be4a2b74d3a03945319dd3c7122fed6ff53bb8b8cb3a03c";
    }

    // The extracted RSA modulus of the leaf x509 signing certificate
    function signingMod() public pure override returns (bytes memory) {
        return
        hex
    }

    // The extracted RSA exponent of the leaf x509 signing certificate
    function signingExp() public pure override returns (bytes memory) {
        return hex"010001";
    }

    // The expected MRENCLAVE value in this specific report
    function mrenclave() public pure override returns (bytes32) {
        return hex"be74b5c3c4d41f079a43bc72f937ead8f90b682b6d85f9d7cfb02dd501bfbc26";
    }

    // The expected MRSIGNER value in this specific report
    function mrsigner() public pure override returns (bytes32) {
        return hex"83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e";
    }

    // The expected payload value in this specific report
    function payload() public pure override returns (bytes memory) {
        // This is a hex-encoded 48 byte BLS public key
        return
        hex"048289b999a1a6bc0cc6550ea018d03adee9bfeae6441e53e2e5eed22232a2b8f2d87cf1619c263971a6ada43f7310f37f473de7262ab63778fe3a859c68dc2e27";
        // return hex"0440ba2fa6602bdb09e40d8b400b0c82124c14c8666659c0c78d8e474f3e230d92597cd4811484e1a15d6886745ed6d3fbde7e66f1376e396d8d4e8fa67458a140";
        // return hex"049777a708d71e0b211eff7d44acc9d81be7bbd1bffdc14f60e784c86b64037c745b82cc5d9da0e93dd96d2fb955c32239b2d1d56a456681d4cef88bd603b9b407";
    }
}

contract EnclaveVerifierTest is Test {
    event AddedPubKey(bytes32 pubKeyHash);
    event RemovedPubKey(bytes32 pubKeyHash);

    EnclaveVerifier verifier;

    MockEvidence validEvidence1;
    MockEvidence validEvidence2;
    MockEvidence validEvidence3;

    MockEvidence validblsEvidence;

    address mockPool = makeAddr("mockPufferPool");

    // DER encoded bytes of the signed Intel Leaf Signing x509 Certificate (including the header and signature)
    // Copied from "lib/rave/test/X509Verifier.t.sol"
    bytes public validLeafX509Certificate =
        hex"308204a130820309a003020102020900d107765d32a3b096300d06092a864886f70d01010b0500307e310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e3130302e06035504030c27496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e67204341301e170d3136313132323039333635385a170d3236313132303039333635385a307b310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e312d302b06035504030c24496e74656c20534758204174746573746174696f6e205265706f7274205369676e696e6730820122300d06092a864886f70d01010105000382010f003082010a0282010100a97a2de0e66ea6147c9ee745ac0162686c7192099afc4b3f040fad6de093511d74e802f510d716038157dcaf84f4104bd3fed7e6b8f99c8817fd1ff5b9b864296c3d81fa8f1b729e02d21d72ffee4ced725efe74bea68fbc4d4244286fcdd4bf64406a439a15bcb4cf67754489c423972b4a80df5c2e7c5bc2dbaf2d42bb7b244f7c95bf92c75d3b33fc5410678a89589d1083da3acc459f2704cd99598c275e7c1878e00757e5bdb4e840226c11c0a17ff79c80b15c1ddb5af21cc2417061fbd2a2da819ed3b72b7efaa3bfebe2805c9b8ac19aa346512d484cfc81941e15f55881cc127e8f7aa12300cd5afb5742fa1d20cb467a5beb1c666cf76a368978b50203010001a381a43081a1301f0603551d2304183016801478437b76a67ebcd0af7e4237eb357c3b8701513c300e0603551d0f0101ff0404030206c0300c0603551d130101ff0402300030600603551d1f045930573055a053a051864f687474703a2f2f7472757374656473657276696365732e696e74656c2e636f6d2f636f6e74656e742f43524c2f5347582f4174746573746174696f6e5265706f72745369676e696e6743412e63726c300d06092a864886f70d01010b050003820181006708b61b5c2bd215473e2b46af99284fbb939d3f3b152c996f1a6af3b329bd220b1d3b610f6bce2e6753bded304db21912f385256216cfcba456bd96940be892f5690c260d1ef84f1606040222e5fe08e5326808212a447cfdd64a46e94bf29f6b4b9a721d25b3c4e2f62f58baed5d77c505248f0f801f9fbfb7fd752080095cee80938b339f6dbb4e165600e20e4a718812d49d9901e310a9b51d66c79909c6996599fae6d76a79ef145d9943bf1d3e35d3b42d1fb9a45cbe8ee334c166eee7d32fcdc9935db8ec8bb1d8eb3779dd8ab92b6e387f0147450f1e381d08581fb83df33b15e000a59be57ea94a3a52dc64bdaec959b3464c91e725bbdaea3d99e857e380a23c9d9fb1ef58e9e42d71f12130f9261d7234d6c37e2b03dba40dfdfb13ac4ad8e13fd3756356b6b50015a3ec9580b815d87c2cef715cd28df00bbf2a3c403ebf6691b3f05edd9143803ca085cff57e053eec2f8fea46ea778a68c9be885bc28225bc5f309be4a2b74d3a03945319dd3c7122fed6ff53bb8b8cb3a03c";

    function setUp() public {
        validEvidence1 = new Guardian1RaveEvidence();
        validblsEvidence = new ValidBLSEvidence();
        verifier = new EnclaveVerifier(100, mockPool);
    }

    // Test setup
    function testSetup() public {
        assertEq(verifier.POOL(), mockPool, "puffer pool address");
        EnclaveVerifier.RSAPubKey memory intelPubKey = verifier.getIntelRootCAPubKey();
        assertEq(
            intelPubKey.modulus,
            hex
            "intel modulus"
        );
        assertEq(intelPubKey.exponent, hex"010001", "intel exponent");
    }

    // Test add leaf
    function testAddLeafX509() public {
        vm.expectEmit(true, true, true, true);
        emit AddedPubKey(keccak256(validLeafX509Certificate));
        verifier.addLeafX509(validLeafX509Certificate);
    }

    // Test remove leaf
    function testRemoveLeafX509() public {
        testAddLeafX509();
        bytes32 hashedCertificate = keccak256(validLeafX509Certificate);

        vm.expectEmit(true, true, true, true);
        emit RemovedPubKey(hashedCertificate);
        vm.prank(mockPool);
        verifier.removeLeafX509(hashedCertificate);
    }

    // Test verify guardian public key
    function testVerifyGuardianPubKey() public { }

    // Test verify validator public key
    function testVerifyValidatorPubKey() public {
        vm.startPrank(mockPool);
        verifier.addLeafX509(validEvidence1.signingCert());

        RaveEvidence memory evidence = RaveEvidence({
            report: validEvidence1.report(),
            signature: validEvidence1.sig(),
            leafX509CertDigest: keccak256(validEvidence1.signingCert())
        });

        bool success = verifier.verifyEvidence({
            blockNumber: 0,
            evidence: evidence,
            raveCommitment: keccak256(validEvidence1.payload()),
            mrenclave: validEvidence1.mrenclave(),
            mrsigner: validEvidence1.mrsigner()
        });

        assertTrue(success, "should verify");
    }
}
